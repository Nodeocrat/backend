<p>This project involves the design and implementation of algorithms on graphs with the highlight being the Auslander-Parter planarity testing algorithm. Users can choose to draw their own graphs or select from a list of demo graphs.</p>

This project was implemented when I was new to software development so the GUI is very basic.
<br>
<br>NOTE BEFORE USING THE SOFTWARE:
<br>1. This implementation of the Auslander-Parter algorithm only operates on biconnected graphs so be sure any custom drawn graphs are biconnected. If you are unsure of what a biconnected graph is, read the short description at the top of <a href="https://en.wikipedia.org/wiki/Biconnected_graph"><u>this</u></a> page. Adapting the algorithm to detect and test each biconnected component is something that could be done but is beyond the scope of the project.
<br>2. On the graph-drawing panel (or the panel after you select a demo graph)... The text on the buttons may be cut off on some devices. The ordering is: "Submit", "Back", "Clear"(graph drawing), "Help" (for draw instructions)
<br>3. In the next panel (from the graph-drawing panel), the 3 buttons at the top is for the algorithm mode; just select AP-Alg if you are unsure.
<br>
<br>Download: <a href="/static/GraphAlgorithms.jar">GraphAlgorithms.jar</a>
<br>This has been tested with Java 1.7 or 1.8 installed. 1.6 might work too.
<br>
<br>The relevant section of my dissertation to understand how the Auslander-Parter works:
<br><object height="1000" width="800" data="/static/Auslander-Parter.pdf"></object>
<br>
<br><a href="https://github.com/Nodeocrat/Graph-Theory-Algorithms"><u>View code on Github</u></a>

<!--There were several other problems which
had to be addressed to implement it in software <b>[Explanation]</b>,
a draft implementation is provided here:
<a href="">project jar file</a>
<br><p>Be sure to have java installed before running. You can chose to run one of the demo's, or you
 can choose to draw your own graph, however it must be biconnected
(i.e. if you remove any one vertex, the graph will still be one connected component).
 It is easily possible to get the algorithm working on non-biconnected graphs by simply
  working through each biconnected component, however, the algorithm which finds these
  components is beyond the scope of what I'm doing here.</p>
-->
